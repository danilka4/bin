#!/bin/sh
# Args: doi/isbn/arxiv/title [optional description]

# This is done in case of a description
if [[ "$#" -eq 2 ]]; then

    description=" - ${2}"
else
    description=""
fi

bib_path="/home/lizzy/Documents/theory/sources.bib"
tmp_path="/tmp/temp.bib"
todo_path="/home/lizzy/Documents/theory/wiki/todo.md"
note_path="/home/lizzy/Documents/theory/notes"


# # Step 1: Figure out whether input DOI, ISBN, title, arxiv
#
option="${1}"
case ${option} in
    stdin) echo "Reading from stdin"
        vibes="stdin"
        ;;
    *arxiv*) echo "Doing an arxiv"
        vibes="arxiv"
        echo "Eat shit, this isn't implemented yet"
        exit 1
        ;;
    *doi*) echo "doi url"
        vibes="doi"
        url="${option}"
        number="$(echo "$url" | sed 's/.*\.org\/\(.*\)/\1/')"
        echo $url
        echo $number
        ;;
    10.*) echo "doi number"
        vibes="doi"
        number="${option}"
        url="https://doi.org/$number"
        echo $url
        echo $number
        ;;
    [0-9][0-9][0-9]*) echo "isbn"
        vibes="isbn"
        # isbn=0226511928
        isbn="${option}"
        url="http://openlibrary.org/search.json?q=${isbn}&fields=title,subtitle,author_name,publish_year,publisher,isbn,publish_place"
        ;;
    https://*) echo "url generally"
        vibes="website"
        url="${option}"
        ;;
    *) echo "Crying, pissing, and shitting"
        exit 1
esac


## Step 2: Obtain bibtex citation + format

case ${vibes} in
    stdin) echo "Doing stdin"
        tabbed="$(</dev/stdin)"
        automations=true
        ;;
    "arxiv") echo "Doing an arxiv"
        echo "Eat shit, this isn't implemented yet"
        exit 1
        ;;
    "doi") echo "requesting ${url}"
        art="$(curl -LH "Accept: application/x-bibtex" "${url}")"
        tabbed="$(echo $art | sed 's/@\([a-zA-Z]*\){\([a-zA-Z0-9_]*\), title/@\1{\2,\n    title/' | sed 's/month=\([a-zA-Z0-9]*\),/month={\1},/'| sed 's/DOI/doi/' | sed 's/ISSN/issn/' | sed 's/}, /},\n    /g' | sed 's/} }/},\n}/' | sed 's/=/ = /')"
    automations=true
        ;;
    "isbn") echo "isbn"
        art="$(curl $url)"
        tabbed="$(echo "$art" | python3 -c "import sys, json; a = json.load(sys.stdin); relevant=a['docs'][0]; title=relevant['title']; subtitle = relevant['subtitle'] if 'subtitle' in relevant.keys() else ''; year=relevant['publish_year'][0]; authors=' and '.join([f'{name.split(' ')[1]}, {name.split(' ')[0]}' for name in relevant['author_name']]);publisher=','.join(relevant['publisher']);isbn='$isbn';publish_place=','.join(relevant['publish_place']) if 'publish_place' in relevant.keys() else '';print('@book{heheheha,\n    title = {'+title+'},\n    subtitle = {'+subtitle+'},\n    author = {'+authors+'},\n    year = {'+str(year)+'},\n    publisher = {'+publisher+'},\n    isbn = {'+str(isbn)+'},\n    location = {'+publish_place+'},\n}')")" # removed heheheha because author logic added after
        authomations=true
        ;;
    "website")
        tabbed="@online{,
    author = {},
    title = {},
    year = {},
    month = {},
    publisher = {},
    url = {$url},
}"
    automations=false
        ;;
    *) echo "How did you get here"
        exit 1
esac


if $automations; then
    lastname="$(echo "$tabbed" | grep -e '^    author' | sed 's/author = {*\([A-Za-z ]*\)[},\.].*/\1/' | tr '[:upper:]' '[:lower:]')"
    echo "Last name: $lastname"
    year="$(echo "$tabbed" | grep -e '^    year' | sed 's/year = {\([0-9]*\).*/\1/')"
    echo "Year: $year"
    title="$(echo "$tabbed" | grep -e '^    title' | sed 's/title = {\(.*\)},$/\1/' | sed 's/://g' | tr '[:upper:]' '[:lower:]')"
    echo "Title: $title"

    stopwordlist='a an the with do does by for with to'
    list=( $title )
    for word in "${list[@]}"; do
        if [[ ! " $stopwordlist " =~ .*\ $word\ .* ]]; then
            break
        fi
    done

    key="$(echo $lastname$year$word | tr -cd '[:alnum:]')"
    echo $key

    tabbed="$(echo "$tabbed" | sed 's/@\([a-zA-Z]*\){.*/@\1{'"$key"',/')"
    # echo "$tabbed"
fi


# Step 3: ensure everything is correct through nvim

# A couple enters to ensure whitespacing
final_entry=$(echo "$tabbed"$'\n'$'\n' | vipe)

if [ -z "${final_entry}" ]; then
    echo "Empty string"
    exit 1
fi

final_entry=$(echo "$final_entry

")
final_key="$(echo "$final_entry" | grep '^@.*' | sed 's/@[a-zA-Z]*{\(.*\),/\1/' )"
echo "$final_key"
# Step 4: add to bibliography

author_list=$(grep '^@' "$bib_path" | sed 's/@[a-zA-Z]*{\(.*\),/\1/')

# Logic to see if at beginning or end before doing binary search
if [[ "$final_key" < $(echo "$author_list" | head -n 1) ]]; then
    echo "$final_entry" | cat - "$bib_path" > "$tmp_path"
    mv "$tmp_path" "$bib_path"
    echo "Placing at the beginning"
elif [[ "$final_key" > $(echo "$author_list" | tail -n 1) ]]; then
    echo "$final_entry" | cat "$bib_path" - > "$tmp_path"
    mv "$tmp_path" "$bib_path"
    echo "Placing at the end"
else
    # Can do binary search but screw that
    for next_key in $author_list; do
        if [[ "$final_key" < "$next_key" ]]; then
            next_line=$(grep "$next_key" $bib_path | head -n 1)
            next_line="${next_line:1}"
            break
        fi
    done
    # echo $next_line
    next_ln=$(grep -n "$next_line" "$bib_path" | head -n 1 | sed 's/\([0-9]*\):.*/\1/')
    head -n "$((next_ln - 1))" "$bib_path" > /tmp/head.bib
    tail -n +"$next_ln" "$bib_path" > /tmp/tail.bib
    echo "$final_entry
" | cat /tmp/head.bib - /tmp/tail.bib > "$bib_path"
    echo "Placing before $next_key"
fi

# Step 5: add to todo or elsewhere

echo "[[notes/$final_key|$final_key]]$description" >> "$todo_path"

# Copies to clipboard
echo "$final_key" | xclip -selection clipboard
nvim "$note_path/$final_key.md"
